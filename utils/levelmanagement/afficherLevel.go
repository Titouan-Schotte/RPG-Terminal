package levelmanagement

import (
	"fmt"
	"rpg/core"
	"rpg/utils"
	"rpg/utils/dialogsmanagement"
	"rpg/utils/jsonmanagement"
	"rpg/utils/questmanagement"
	"strings"
)

func AfficherLevel(name string, level [][]map[string]string, questlog []string, QuestIn questmanagement.Quest, player core.Player) {
	print(utils.Colorize(utils.Yellow, name))
	if player.QuestIn > 0 {
		for space := 0; space < 30-len(name); space++ {
			fmt.Print(" ")
		}
		fmt.Println(questlog[0])
	} else {
		fmt.Println()
	}
	objectifCompt := 0
	for i, row := range level {
		for _, cell := range row {
			for symbol, _ := range cell {
				colorize := ""
				switch symbol {
				case "üß±":
					colorize = utils.Red
				case "üü©":
					colorize = utils.Green
				case "üå≥":
					colorize = utils.Green
				case "üå≤":
					colorize = utils.Green
				case "üêä":
					colorize = utils.Green + utils.Bold
				case "‚ñ∂ ":
					colorize = utils.Purple
				case "‚óÄ ":
					colorize = utils.Purple
				case "üî∫":
					colorize = utils.Purple
				case "üîª":
					colorize = utils.Purple
				case "üü´":
					colorize = utils.Gray
				case "ü™®":
					colorize = utils.Gray + utils.Bold
				case "üçÇ":
					colorize = utils.Red + utils.Bold
				case "üü®":
					colorize = utils.Yellow
				case "üí∞":
					colorize = utils.Yellow + utils.Bold
				case "ü™ô":
					colorize = utils.Green + utils.Bold
				case "üõçÔ∏è ":
					colorize = utils.Cyan + utils.Bold
				case "üüß":
					colorize = utils.Red + utils.Bold
				case "üåã":
					colorize = utils.Red + utils.Bold
				case "üü¶":
					colorize = utils.Blue
				case "üü•":
					colorize = utils.Red
				case "üü™":
					colorize = utils.Purple
				case "üíß":
					colorize = utils.Blue
				case "üî∞":
					colorize = utils.Yellow + utils.Bold
				case "ü¶Ü":
					colorize = utils.Yellow
				case "üåæ":
					colorize = utils.Yellow + utils.Bold
				case "üåº":
					colorize = utils.White + utils.Bold
				case "üåª":
					colorize = utils.Yellow + utils.Bold
				case "üõå":
					colorize = utils.Purple
				case "üåπ":
					colorize = utils.Red + utils.Bold
				case "üå±":
					colorize = utils.Green + utils.Bold
				case "ü™¥":
					colorize = utils.Green + utils.Bold
				case "üå∫":
					colorize = utils.Purple + utils.Bold
				case "üî•":
					colorize = utils.Red
				case "‚ö™":
					colorize = utils.Gray
				case "üò∑":
					if !dialogsmanagement.CanReadDialog(4, player.DialogsCompleted) {
						colorize = utils.Yellow
					} else {
						colorize = utils.Gray
					}
				case "ü´Ö":
					if !dialogsmanagement.CanReadDialog(7, player.DialogsCompleted) {
						colorize = utils.Yellow
					} else {
						colorize = utils.Gray
					}
				case "üßù":
					if !dialogsmanagement.CanReadDialog(10, player.DialogsCompleted) {
						colorize = utils.Yellow
					} else {
						colorize = utils.Gray
					}
				}
				fmt.Print(utils.Colorize(colorize, symbol))
			}
		}
		if player.QuestIn > 0 {
			for space := 0; space < 15-len(row); space++ {
				fmt.Print("  ")
			}
			if len(questlog) > i+1 && i+1 > 0 {
				fmt.Print("#")
				if strings.Contains(questlog[i+1], "%v") {
					if QuestIn.IsItemsQuest() {
						fmt.Printf(questlog[i+1], player.Inventaire[utils.GetKeys(QuestIn.Content.(questmanagement.ContentItems).Items)[objectifCompt]])
						objectifCompt++
					}
					if QuestIn.IsKillQuest() {
						fmt.Printf(questlog[i+1], QuestIn.Content.(questmanagement.ContentKill).TargetsIn[utils.GetKeys(QuestIn.Content.(questmanagement.ContentKill).TargetsIn)[objectifCompt]])
						objectifCompt++
					}
				} else {
					fmt.Print(questlog[i+1])
				}
			}
		}
		println()

	}
	if player.QuestIn > 0 {
		questLogOverflow := len(questlog) - len(level)
		for i := len(level); i < len(level)+questLogOverflow; i++ {
			for space := 0; space < 15; space++ {
				fmt.Print("  ")
			}

			if len(questlog) > i+1 && i+1 > 0 {
				fmt.Print("#")
				if strings.Contains(questlog[i+1], "%v") {
					if QuestIn.IsItemsQuest() {
						fmt.Printf(questlog[i+1], player.GetAmountOfItem(utils.GetKeys(QuestIn.Content.(questmanagement.ContentItems).Items)[objectifCompt]))
						objectifCompt++
					}
					if QuestIn.IsKillQuest() {
						fmt.Printf(questlog[i+1], QuestIn.Content.(questmanagement.ContentKill).TargetsIn[utils.GetKeys(QuestIn.Content.(questmanagement.ContentKill).TargetsIn)[objectifCompt]])
						objectifCompt++
					}
				} else {
					fmt.Print(questlog[i+1])
				}
			}
			println()
		}
	}
	jaugeLength := 20
	pourcentageVie := jsonmanagement.Get("parties/"+player.Pseudo, "health").(float64) / jsonmanagement.Get("parties/"+player.Pseudo, "maxhealth").(float64)
	nbCaracteresRemplis := int(pourcentageVie * float64(jaugeLength))
	nbCaracteresVides := jaugeLength - nbCaracteresRemplis

	jaugeRemplie := strings.Repeat("‚ñà", nbCaracteresRemplis)
	jaugeVide := strings.Repeat("‚ñë", nbCaracteresVides)

	jauge := jaugeRemplie + jaugeVide
	fmt.Printf("\n"+utils.Colorize(utils.Cyan, "üßù")+": [%s] %v/%v hp\n", utils.Colorize(utils.Green, jauge), utils.Colorize(utils.Yellow+utils.Bold, player.Health), utils.Colorize(utils.Green+utils.Bold, player.MaxHealth))
}
